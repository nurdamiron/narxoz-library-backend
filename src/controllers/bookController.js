// controllers/bookController.js
const path = require('path');
const fs = require('fs');
const { Op } = require('sequelize');
const ErrorResponse = require('../utils/errorResponse');
const db = require('../models');
const Book = db.Book;
const Category = db.Category;
const Bookmark = db.Bookmark;
const User = db.User;
const { validationResult } = require('express-validator');
const multer = require('multer');
const { Sequelize } = require('sequelize');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫
const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    const uploadDir = path.join(__dirname, '../../public/uploads/covers');
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function(req, file, cb) {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, `book-${req.params.id}-${uniqueSuffix}${ext}`);
  }
});

// –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new ErrorResponse('–¢–µ–∫ —Å—É—Ä–µ—Ç —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É–≥–µ —Ä“±“õ—Å–∞—Ç –µ—Ç—ñ–ª–≥–µ–Ω', 400), false);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è multer
const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: fileFilter
}).single('file');

/**
 * @desc    –ë–∞—Ä–ª—ã“õ –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É
 * @route   GET /api/books
 * @access  Public
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –±–∞—Ä–ª—ã“õ –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã —ñ–∑–¥–µ–π–¥—ñ –∂”ô–Ω–µ —Ç“Ø—Ä–ª—ñ —Å“Ø–∑—É,
 * —ñ–∑–¥–µ—É –∂”ô–Ω–µ —Å“±—Ä—ã–ø—Ç–∞—É –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω “õ–æ–ª–¥–∞–π–¥—ã. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞–Ω“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä
 * “Ø—à—ñ–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã“£ –±–µ—Ç–±–µ–ª–≥—ñ–¥–µ –±–∞—Ä-–∂–æ“ì—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.
 */
exports.getBooks = async (req, res, next) => {
  console.log('üìö GetBooks —Å“±—Ä–∞–Ω—ã—Å—ã –∞–ª—ã–Ω–¥—ã:', {
    query: req.query,
    user: req.user ? req.user.id : 'anonymous'
  });
  try {
    // –°“±—Ä–∞–Ω—ã—Å –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
    const queryOptions = {
      include: [
        {
          model: Category,
          as: 'category',
          attributes: ['id', 'name'],
        },
      ],
      where: {},
      order: [['publicationYear', 'DESC']],
    };

    // –Ü–∑–¥–µ—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–¥—ã“ì—ã
    if (req.query.search) {
      // –ù–µ–≥—ñ–∑–≥—ñ —ñ–∑–¥–µ—É “Ø—à—ñ–Ω LIKE –Ω–µ–º–µ—Å–µ —Ç–æ–ª—ã“õ –º”ô—Ç—ñ–Ω–¥—ñ —ñ–∑–¥–µ—É “Ø—à—ñ–Ω MATCH AGAINST (“õ–æ–ª–¥–∞—É –±–æ–ª—Å–∞)
      queryOptions.where = {
        [Op.or]: [
          { title: { [Op.like]: `%${req.query.search}%` } },
          { author: { [Op.like]: `%${req.query.search}%` } },
          { description: { [Op.like]: `%${req.query.search}%` } }
        ],
      };
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É
    if (req.query.categoryId) {
      queryOptions.where.categoryId = req.query.categoryId;
    }

    // –¢—ñ–ª –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É (–µ–≥–µ—Ä –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω –±–æ–ª—Å–∞)
    if (req.query.language) {
      console.log('üåê –¢—ñ–ª –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É:', req.query.language);
      queryOptions.where.language = req.query.language;
    }
    
    // –ñ—ã–ª –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É (–±—ñ—Ä –∂—ã–ª –Ω–µ–º–µ—Å–µ –∂—ã–ª –∞—Ä–∞–ª—ã“ì—ã)
    if (req.query.year) {
      const year = parseInt(req.query.year, 10);
      console.log('üìÖ –ñ—ã–ª –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É:', year);
      if (!isNaN(year)) {
        queryOptions.where.publicationYear = year;
      }
    } else if (req.query.yearFrom || req.query.yearTo) {
      queryOptions.where.publicationYear = {};
      
      if (req.query.yearFrom) {
        queryOptions.where.publicationYear[Op.gte] = parseInt(req.query.yearFrom, 10);
      }
      
      if (req.query.yearTo) {
        queryOptions.where.publicationYear[Op.lte] = parseInt(req.query.yearTo, 10);
      }
    }
    
    // “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑—É
    if (req.query.available === 'true') {
      queryOptions.where.availableCopies = { [Op.gt]: 0 };
    }
    
    // –°“±—Ä—ã–ø—Ç–∞—É
    if (req.query.sort) {
      // –ñ–∞“£–∞ —Ñ–æ—Ä–º–∞—Ç: -createdAt, title, -publicationYear —Ç.–±.
      const sortParam = req.query.sort;
      const isDescending = sortParam.startsWith('-');
      const field = isDescending ? sortParam.substring(1) : sortParam;
      const order = isDescending ? 'DESC' : 'ASC';
      
      switch (field) {
        case 'title':
          queryOptions.order = [['title', order]];
          break;
        case 'author':
          queryOptions.order = [['author', order]];
          break;
        case 'publicationYear':
          queryOptions.order = [['publicationYear', order]];
          break;
        case 'rating':
          queryOptions.order = [['rating', order]];
          break;
        case 'createdAt':
          queryOptions.order = [['createdAt', order]];
          break;
        default:
          queryOptions.order = [['createdAt', 'DESC']];
      }
    } else if (req.query.sortBy) {
      // –ï—Å–∫—ñ —Ñ–æ—Ä–º–∞—Ç “Ø—à—ñ–Ω “õ–æ–ª–¥–∞—É (–∫–µ—Ä—ñ “Ø–π–ª–µ—Å—ñ–º–¥—ñ–ª—ñ–∫)
      const sortOrder = req.query.sortOrder === 'asc' ? 'ASC' : 'DESC';
      
      switch (req.query.sortBy) {
        case 'title':
          queryOptions.order = [['title', sortOrder]];
          break;
        case 'author':
          queryOptions.order = [['author', sortOrder]];
          break;
        case 'year':
          queryOptions.order = [['publicationYear', sortOrder]];
          break;
        case 'popularity':
          queryOptions.order = [['createdAt', sortOrder]];
          break;
        default:
          queryOptions.order = [['publicationYear', 'DESC']];
      }
    }
    
    // –ë–µ—Ç—Ç–µ—É
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 20;
    const offset = (page - 1) * limit;
    
    // “ö–æ—Å—ã–º—à–∞ –±–µ—Ç—Ç–µ—É –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω “õ–æ—Å—É
    queryOptions.limit = limit;
    queryOptions.offset = offset;

    // –ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã“£ –∂–∞–ª–ø—ã —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É
    const count = await Book.count({ where: queryOptions.where });
    
    // –ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É
    const books = await Book.findAll(queryOptions);

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞–Ω“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä “Ø—à—ñ–Ω –±–µ—Ç–±–µ–ª–≥—ñ –∂–∞“ì–¥–∞–π—ã–Ω “õ–æ—Å—É
    let booksWithBookmarkStatus = books;

    if (req.user) {
      const bookIds = books.map(book => book.id);
      const bookmarks = await Bookmark.findAll({
        where: {
          userId: req.user.id,
          bookId: {
            [Op.in]: bookIds,
          },
        },
      });

      const bookmarkedIds = bookmarks.map(bookmark => bookmark.bookId);
      
      booksWithBookmarkStatus = books.map(book => {
        const bookObj = book.toJSON();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π URL –¥–æ –æ–±–ª–æ–∂–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (bookObj.cover) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º URL –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
          if (!bookObj.cover.startsWith('http')) {
            const serverUrl = `${req.protocol}://${req.get('host')}`;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            bookObj.relativeCoverPath = bookObj.cover;
            bookObj.cover = `${serverUrl}${bookObj.cover}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏
            const coverFilePath = path.join(__dirname, '../../public', bookObj.relativeCoverPath);
            bookObj.coverFileExists = fs.existsSync(coverFilePath);
            bookObj.coverFileSize = bookObj.coverFileExists ? fs.statSync(coverFilePath).size : 0;
            
            console.log(`üìö –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–ª–æ–∂–∫–µ –¥–ª—è –∫–Ω–∏–≥–∏ ${bookObj.id} (${bookObj.title}):
              - –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: ${bookObj.relativeCoverPath}
              - –ü–æ–ª–Ω—ã–π URL: ${bookObj.cover}
              - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${bookObj.coverFileExists ? '–î–∞' : '–ù–µ—Ç'}
              - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${bookObj.coverFileSize} –±–∞–π—Ç
            `);
          }
        }
        
        bookObj.isBookmarked = bookmarkedIds.includes(book.id);
        return bookObj;
      });
    }

    // –ë–µ—Ç—Ç–µ—É –Ω”ô—Ç–∏–∂–µ—Å—ñ
    const pagination = {};
    
    if (offset + books.length < count) {
      pagination.next = {
        page: page + 1,
        limit,
      };
    }
    
    if (offset > 0) {
      pagination.prev = {
        page: page - 1,
        limit,
      };
    }

    console.log(`‚úÖ –ö—ñ—Ç–∞–ø—Ç–∞—Ä —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ: ${booksWithBookmarkStatus.length} –∫—ñ—Ç–∞–ø, –±–∞—Ä–ª—ã“ì—ã: ${count}`);
    
    res.status(200).json({
      success: true,
      count: booksWithBookmarkStatus.length,
      total: count,
      totalPages: Math.ceil(count / limit),
      pagination,
      data: booksWithBookmarkStatus,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ù–∞“õ—Ç—ã –∫—ñ—Ç–∞–ø—Ç—ã –∞–ª—É
 * @route   GET /api/books/:id
 * @access  Public
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è ID –±–æ–π—ã–Ω—à–∞ –Ω–∞“õ—Ç—ã –∫—ñ—Ç–∞–ø—Ç—ã “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞–Ω“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä “Ø—à—ñ–Ω –∫—ñ—Ç–∞–ø—Ç—ã“£ –±–µ—Ç–±–µ–ª–≥—ñ–¥–µ
 * –±–∞—Ä-–∂–æ“ì—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.
 */
exports.getBook = async (req, res, next) => {
  try {
    // ID –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç—ã –∞–ª—É
    const book = await Book.findByPk(req.params.id, {
      include: [
        {
          model: Category,
          as: 'category',
          attributes: ['id', 'name'],
        },
      ],
    });

    // –ö—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞—Å–∞ “õ–∞—Ç–µ “õ–∞–π—Ç–∞—Ä—É
    if (!book) {
      return next(
        new ErrorResponse(`${req.params.id} ID-–º–µ–Ω –∫—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
      );
    }

    // –ö—ñ—Ç–∞–ø—Ç—ã –æ–±—ä–µ–∫—Ç–∫–µ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É
    const bookObj = book.toJSON();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π URL –¥–æ –æ–±–ª–æ–∂–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (bookObj.cover) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º URL –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
      if (!bookObj.cover.startsWith('http')) {
        const serverUrl = `${req.protocol}://${req.get('host')}`;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        bookObj.relativeCoverPath = bookObj.cover;
        bookObj.cover = `${serverUrl}${bookObj.cover}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏
        const coverFilePath = path.join(__dirname, '../../public', bookObj.relativeCoverPath);
        bookObj.coverFileExists = fs.existsSync(coverFilePath);
        bookObj.coverFileSize = bookObj.coverFileExists ? fs.statSync(coverFilePath).size : 0;
        
        console.log(`üìö –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–ª–æ–∂–∫–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∫–Ω–∏–≥–∏ ${bookObj.id} (${bookObj.title}):
          - –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: ${bookObj.relativeCoverPath}
          - –ü–æ–ª–Ω—ã–π URL: ${bookObj.cover}
          - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${bookObj.coverFileExists ? '–î–∞' : '–ù–µ—Ç'}
          - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${bookObj.coverFileSize} –±–∞–π—Ç
        `);
      }
    }

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞–Ω“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä “Ø—à—ñ–Ω –±–µ—Ç–±–µ–ª–≥—ñ –∂–∞“ì–¥–∞–π—ã–Ω “õ–æ—Å—É
    if (req.user) {
      const bookmark = await Bookmark.findOne({
        where: {
          userId: req.user.id,
          bookId: book.id,
        },
      });

      bookObj.isBookmarked = !!bookmark;
    }

    res.status(200).json({
      success: true,
      data: bookObj,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ñ–∞“£–∞ –∫—ñ—Ç–∞–ø –∂–∞—Å–∞—É
 * @route   POST /api/books
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –∂–∞“£–∞ –∫—ñ—Ç–∞–ø –∂–∞—Å–∞—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ.
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∂–∞“£–∞ –∫—ñ—Ç–∞–ø—Ç–∞—Ä –∂–∞—Å–∞–π –∞–ª–∞–¥—ã.
 */
exports.createBook = async (req, res, next) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        errors: errors.array(),
      });
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID –±–æ–ª—Å–∞, –æ–ª ”©–º—ñ—Ä —Å“Ø—Ä–µ—Ç—ñ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
    if (req.body.categoryId) {
      const category = await Category.findByPk(req.body.categoryId);
      if (!category) {
        return next(
          new ErrorResponse(`${req.body.categoryId} ID-–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
        );
      }
    }

    // –ñ–∞“£–∞ –∫—ñ—Ç–∞–ø –∂–∞—Å–∞—É
    const book = await Book.create(req.body);

    res.status(201).json({
      success: true,
      data: book,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ö—ñ—Ç–∞–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É
 * @route   PUT /api/books/:id
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –±–∞—Ä –∫—ñ—Ç–∞–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ.
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∂–∞“£–∞—Ä—Ç–∞ –∞–ª–∞–¥—ã.
 */
exports.updateBook = async (req, res, next) => {
  try {
    // ID –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç—ã –∞–ª—É
    const book = await Book.findByPk(req.params.id);

    // –ö—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞—Å–∞ “õ–∞—Ç–µ “õ–∞–π—Ç–∞—Ä—É
    if (!book) {
      return next(
        new ErrorResponse(`${req.params.id} ID-–º–µ–Ω –∫—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
      );
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID –±–æ–ª—Å–∞, –æ–ª ”©–º—ñ—Ä —Å“Ø—Ä–µ—Ç—ñ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
    if (req.body.categoryId) {
      const category = await Category.findByPk(req.body.categoryId);
      if (!category) {
        return next(
          new ErrorResponse(`${req.body.categoryId} ID-–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
        );
      }
    }

    // –ö—ñ—Ç–∞–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É
    await book.update(req.body);

    res.status(200).json({
      success: true,
      data: book,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ö—ñ—Ç–∞–ø—Ç—ã –∂–æ—é
 * @route   DELETE /api/books/:id
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –∫—ñ—Ç–∞–ø—Ç—ã –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω –∂–æ—è–¥—ã.
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∂–æ—è –∞–ª–∞–¥—ã.
 */
exports.deleteBook = async (req, res, next) => {
  try {
    // ID –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç—ã —ñ–∑–¥–µ—É
    const book = await Book.findByPk(req.params.id);

    // –ö—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞—Å–∞ “õ–∞—Ç–µ “õ–∞–π—Ç–∞—Ä—É
    if (!book) {
      return next(
        new ErrorResponse(`${req.params.id} ID-–º–µ–Ω –∫—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
      );
    }

    // –ï—Å–ª–∏ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    if (book.cover && !book.cover.startsWith('http')) {
      const coverPath = path.join(__dirname, '../../public', book.cover);
      if (fs.existsSync(coverPath)) {
        fs.unlinkSync(coverPath);
      }
    }

    // –ö—ñ—Ç–∞–ø—Ç—ã –∂–æ—é
    await book.destroy();

    res.status(200).json({
      success: true,
      data: {},
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ö—ñ—Ç–∞–ø –º“±“õ–∞–±–∞—Å—ã–Ω –∂“Ø–∫—Ç–µ—É
 * @route   PUT /api/books/:id/cover
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –∫—ñ—Ç–∞–ø “Ø—à—ñ–Ω –∂–∞“£–∞ –º“±“õ–∞–±–∞ —Å—É—Ä–µ—Ç—ñ–Ω –∂“Ø–∫—Ç–µ—É–≥–µ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ.
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∫—ñ—Ç–∞–ø –º“±“õ–∞–±–∞–ª–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ–π –∞–ª–∞–¥—ã.
 */
exports.uploadBookCover = async (req, res, next) => {
  try {
    // ID –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç—ã –∞–ª—É
    const book = await Book.findByPk(req.params.id);

    // –ö—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞—Å–∞ “õ–∞—Ç–µ “õ–∞–π—Ç–∞—Ä—É
    if (!book) {
      return next(
        new ErrorResponse(`${req.params.id} ID-–º–µ–Ω –∫—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const uploadDir = path.join(__dirname, '../../public/uploads/covers');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
      console.log(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫: ${uploadDir}`);
    }

    // Multer –∞—Ä“õ—ã–ª—ã —Ñ–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É
    upload(req, res, async function(err) {
      if (err) {
        if (err.code === 'LIMIT_FILE_SIZE') {
          return next(
            new ErrorResponse('–§–∞–π–ª ”©–ª—à–µ–º—ñ 5MB-–¥–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫', 400)
          );
        }
        return next(err);
      }

      if (!req.file) {
        return next(
          new ErrorResponse('–ñ“Ø–∫—Ç–µ—É “Ø—à—ñ–Ω —Ñ–∞–π–ª —Ç–∞“£–¥–∞“£—ã–∑', 400)
        );
      }

      // –°–∞“õ—Ç–∞—É —Ä–µ–∂–∏–º—ñ–Ω –∞–Ω—ã“õ—Ç–∞—É (–ª–æ–∫–∞–ª—å–¥—ã –Ω–µ–º–µ—Å–µ —Å—ã—Ä—Ç“õ—ã)
      const storeLocally = true; // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      
      try {
        const filePath = req.file.path;
        const fileName = req.file.filename;
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${fileName}, –ø—É—Ç—å: ${filePath}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        let coverUrl = `/uploads/covers/${fileName}`;
        console.log(`üì∏ –ú“±“õ–∞–±–∞ –ª–æ–∫–∞–ª—å–¥—ã —Å–∞“õ—Ç–∞–ª–¥—ã: ${coverUrl}`);

        // –ï—Å–∫—ñ –º“±“õ–∞–±–∞ —Ñ–∞–π–ª—ã–Ω –∂–æ—é (”ô–¥–µ–ø–∫—ñ–¥–µ–Ω –±–∞—Å“õ–∞)
        const oldCover = book.cover;
        if (oldCover && !oldCover.includes('default-book-cover') && oldCover.startsWith('/uploads/')) {
          const oldCoverPath = path.join(__dirname, '../../public', oldCover);
          if (fs.existsSync(oldCoverPath)) {
            fs.unlinkSync(oldCoverPath);
            console.log(`üóëÔ∏è –ï—Å–∫—ñ –º“±“õ–∞–±–∞ –∂–æ–π—ã–ª–¥—ã: ${oldCoverPath}`);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if (!fs.existsSync(filePath)) {
          return next(
            new ErrorResponse('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', 500)
          );
        }

        // –ö—ñ—Ç–∞–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –ë–î)
        await book.update({ 
          cover: coverUrl,
          coverStoredLocally: storeLocally
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const newCoverPath = path.join(__dirname, '../../public', coverUrl);
        const fileExistsAtNewPath = fs.existsSync(newCoverPath);
        console.log(`üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${newCoverPath} - ${fileExistsAtNewPath ? '–°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);

        // –¢–æ–ª—ã“õ URL –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω “õ“±—Ä—É - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const serverUrl = `${req.protocol}://${req.get('host')}`;
        const fullCoverUrl = `${serverUrl}${coverUrl}`;
        console.log(`üîó –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω—ã–π URL –æ–±–ª–æ–∂–∫–∏: ${fullCoverUrl}`);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
        const fileFullPath = path.join(__dirname, '../../public', coverUrl);
        const fileExists = fs.existsSync(fileFullPath);
        const fileSize = fileExists ? fs.statSync(fileFullPath).size : 0;
        
        console.log(`üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏ –Ω–∞ –¥–∏—Å–∫–µ: 
          - –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${fileFullPath}
          - –°—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fileExists ? '–î–∞' : '–ù–µ—Ç'}
          - –†–∞–∑–º–µ—Ä: ${fileSize} –±–∞–π—Ç
        `);
        
        // –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, –≥–¥–µ –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –æ–±–ª–æ–∂–∫—É
        res.status(200).json({
          success: true,
          data: {
            id: book.id,
            cover: fullCoverUrl, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL
            coverStoredLocally: storeLocally,
            relativePath: coverUrl, // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            fileInfo: {
              exists: fileExists,
              size: fileSize,
              path: fileFullPath,
              url: coverUrl,
              fullUrl: fullCoverUrl
            }
          },
          message: '–ö—ñ—Ç–∞–ø –º“±“õ–∞–±–∞—Å—ã —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ'
        });
      } catch (error) {
        // –ñ“Ø–∫—Ç–µ–ª–≥–µ–Ω —Ñ–∞–π–ª–¥—ã —Ç–∞–∑–∞–ª–∞—É
        if (req.file) {
          try {
            fs.unlinkSync(req.file.path);
            console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${req.file.path}`);
          } catch (unlinkError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${unlinkError.message}`);
          }
        }
        throw error;
      }
    });
  } catch (err) {
    console.error(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏: ${err.message}`);
    next(err);
  }
};

/**
 * @desc    –ö—ñ—Ç–∞–ø “õ–æ—Ä—ã–Ω –∂–∞“£–∞—Ä—Ç—É (—Ç–µ–∫ ”ô–∫—ñ–º—à—ñ)
 * @route   PUT /api/books/:id/inventory
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –∫—ñ—Ç–∞–ø—Ç—ã“£ –∂–∞–ª–ø—ã –∂”ô–Ω–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä —Å–∞–Ω—ã–Ω –∂–∞“£–∞—Ä—Ç–∞–¥—ã.
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∫—ñ—Ç–∞–ø “õ–æ—Ä—ã–Ω –∂–∞“£–∞—Ä—Ç–∞ –∞–ª–∞–¥—ã.
 */
exports.updateInventory = async (req, res, next) => {
  try {
    const { totalCopies, availableCopies } = req.body;

    // –ö–µ–º –¥–µ–≥–µ–Ω–¥–µ –±—ñ—Ä ”©—Ä—ñ—Å –±–µ—Ä—ñ–ª–≥–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
    if (totalCopies === undefined && availableCopies === undefined) {
      return next(
        new ErrorResponse('totalCopies –Ω–µ–º–µ—Å–µ availableCopies –±–µ—Ä—ñ“£—ñ–∑', 400)
      );
    }

    // ID –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç—ã —ñ–∑–¥–µ—É
    const book = await Book.findByPk(req.params.id);

    // –ö—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞—Å–∞ “õ–∞—Ç–µ “õ–∞–π—Ç–∞—Ä—É
    if (!book) {
      return next(
        new ErrorResponse(`${req.params.id} ID-–º–µ–Ω –∫—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
      );
    }

    // “ö–æ—Ä ”©—Ä—ñ—Å—Ç–µ—Ä—ñ–Ω –∂–∞“£–∞—Ä—Ç—É
    if (totalCopies !== undefined) {
      book.totalCopies = totalCopies;
    }

    if (availableCopies !== undefined) {
      book.availableCopies = availableCopies;
    }

    // availableCopies totalCopies-—Ç–µ–Ω –∞—Å–ø–∞—É—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
    if (book.availableCopies > book.totalCopies) {
      book.availableCopies = book.totalCopies;
    }

    await book.save();

    res.status(200).json({
      success: true,
      data: book,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ë–∞—Ä–ª—ã“õ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∞–ª—É
 * @route   GET /api/books/categories
 * @access  Public
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –±–∞—Ä–ª—ã“õ –∫—ñ—Ç–∞–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä—ã–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
 */
exports.getCategories = async (req, res, next) => {
  try {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∞–ª—É
    const categories = await Category.findAll({
      attributes: ['id', 'name', 'description'],
      order: [['name', 'ASC']],
    });

    res.status(200).json({
      success: true,
      count: categories.length,
      data: categories,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞—Å–∞—É
 * @route   POST /api/books/categories
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –∂–∞“£–∞ –∫—ñ—Ç–∞–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Å—ã–Ω –∂–∞—Å–∞–π–¥—ã. 
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∂–∞“£–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä –∂–∞—Å–∞–π –∞–ª–∞–¥—ã.
 */
exports.createCategory = async (req, res, next) => {
  try {
    // –ñ–∞“£–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞—Å–∞—É
    const category = await Category.create(req.body);

    res.status(201).json({
      success: true,
      data: category,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã –∂–∞“£–∞—Ä—Ç—É
 * @route   PUT /api/books/categories/:id
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –∫—ñ—Ç–∞–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Å—ã–Ω –∂–∞“£–∞—Ä—Ç–∞–¥—ã.
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∂–∞“£–∞—Ä—Ç–∞ –∞–ª–∞–¥—ã.
 */
exports.updateCategory = async (req, res, next) => {
  try {
    // ID –±–æ–π—ã–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —ñ–∑–¥–µ—É
    const category = await Category.findByPk(req.params.id);

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞–±—ã–ª–º–∞—Å–∞ “õ–∞—Ç–µ “õ–∞–π—Ç–∞—Ä—É
    if (!category) {
      return next(
        new ErrorResponse(`${req.params.id} ID-–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
      );
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã –∂–∞“£–∞—Ä—Ç—É
    await category.update(req.body);

    res.status(200).json({
      success: true,
      data: category,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã –∂–æ—é
 * @route   DELETE /api/books/categories/:id
 * @access  Private/Admin
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –∫—ñ—Ç–∞–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Å—ã–Ω –∂–æ—è–¥—ã.
 * –¢–µ–∫ ”ô–∫—ñ–º—à—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∂–æ—è –∞–ª–∞–¥—ã.
 */
exports.deleteCategory = async (req, res, next) => {
  try {
    // ID –±–æ–π—ã–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —ñ–∑–¥–µ—É
    const category = await Category.findByPk(req.params.id);

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞–±—ã–ª–º–∞—Å–∞ “õ–∞—Ç–µ “õ–∞–π—Ç–∞—Ä—É
    if (!category) {
      return next(
        new ErrorResponse(`${req.params.id} ID-–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞–±—ã–ª–º–∞–¥—ã`, 404)
      );
    }

    // –ë“±–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—è“ì–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∫—ñ—Ç–∞–ø—Ç–∞—Ä –±–∞—Ä-–∂–æ“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
    const booksCount = await Book.count({
      where: {
        categoryId: category.id,
      },
    });

    if (booksCount > 0) {
      return next(
        new ErrorResponse(
          `–ë“±–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—è“ì–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã ${booksCount} –∫—ñ—Ç–∞–ø –±–∞—Ä. –ê–ª–¥—ã–º–µ–Ω –æ–ª–∞—Ä–¥—ã –±–∞—Å“õ–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“ì–∞ –∞—É—ã—Å—Ç—ã—Ä—ã“£—ã–∑.`,
          400
        )
      );
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã –∂–æ—é
    await category.destroy();

    res.status(200).json({
      success: true,
      data: {},
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –¢–∞–Ω—ã–º–∞–ª –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É
 * @route   GET /api/books/popular
 * @access  Public
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –µ“£ —Ç–∞–Ω—ã–º–∞–ª –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
 * –¢–∞–Ω—ã–º–∞–ª–¥—ã–ª—ã“õ –±–µ—Ç–±–µ–ª–≥—ñ–ª–µ—Ä —Å–∞–Ω—ã –±–æ–π—ã–Ω—à–∞ –∞–Ω—ã“õ—Ç–∞–ª–∞–¥—ã.
 */
exports.getPopularBooks = async (req, res, next) => {
  try {
    // –ë–µ—Ç–±–µ–ª–≥—ñ–ª–µ—Ä —Å–∞–Ω—ã –±–æ–π—ã–Ω—à–∞ —Å“±—Ä—ã–ø—Ç–∞–ª“ì–∞–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É
    const books = await Book.findAll({
      include: [
        {
          model: Category,
          as: 'category',
          attributes: ['id', 'name'],
        },
        {
          model: Bookmark,
          as: 'bookmarks',
          attributes: [],
        }
      ],
      attributes: {
        include: [
          [Sequelize.literal('(SELECT COUNT(*) FROM Bookmarks WHERE Bookmarks.bookId = Book.id)'), 'bookmarkCount']
        ]
      },
      order: [
        [Sequelize.literal('bookmarkCount'), 'DESC']
      ],
      limit: 10
    });

    // –ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã“£ –º“±“õ–∞–±–∞ URL-–¥–∞—Ä—ã–Ω —Ç–æ–ª—ã“õ URL-–¥–∞—Ä“ì–∞ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É
    const booksWithFullUrls = books.map(book => {
      const bookObj = book.toJSON();
      
      if (bookObj.cover && !bookObj.cover.startsWith('http')) {
        const serverUrl = `${req.protocol}://${req.get('host')}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        bookObj.relativeCoverPath = bookObj.cover;
        bookObj.cover = `${serverUrl}${bookObj.cover}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏
        const coverFilePath = path.join(__dirname, '../../public', bookObj.relativeCoverPath);
        bookObj.coverFileExists = fs.existsSync(coverFilePath);
        bookObj.coverFileSize = bookObj.coverFileExists ? fs.statSync(coverFilePath).size : 0;
        
        console.log(`üìö –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–ª–æ–∂–∫–µ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π/–Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏ ${bookObj.id} (${bookObj.title}):
          - –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: ${bookObj.relativeCoverPath}
          - –ü–æ–ª–Ω—ã–π URL: ${bookObj.cover}
          - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${bookObj.coverFileExists ? '–î–∞' : '–ù–µ—Ç'}
          - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${bookObj.coverFileSize} –±–∞–π—Ç
        `);
      }
      
      return bookObj;
    });

    res.status(200).json({
      success: true,
      count: booksWithFullUrls.length,
      data: booksWithFullUrls,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –§–∏–ª—å—Ç—Ä –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω –∞–ª—É (—Ç—ñ–ª–¥–µ—Ä –º–µ–Ω –∂—ã–ª–¥–∞—Ä)
 * @route   GET /api/books/filter-options
 * @access  Public
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –±–∞—Ä–ª—ã“õ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ —Ç—ñ–ª–¥–µ—Ä –º–µ–Ω –∂—ã–ª–¥–∞—Ä–¥—ã “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
 */
exports.getFilterOptions = async (req, res, next) => {
  try {
    console.log('üîç –§–∏–ª—å—Ç—Ä –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É...');
    
    // –ë–∞—Ä–ª—ã“õ –±—ñ—Ä–µ–≥–µ–π —Ç—ñ–ª–¥–µ—Ä–¥—ñ –∞–ª—É
    const languages = await Book.findAll({
      attributes: [
        [Sequelize.fn('DISTINCT', Sequelize.col('language')), 'language']
      ],
      where: {
        language: { [Op.ne]: null }
      },
      raw: true
    });
    
    // –ë–∞—Ä–ª—ã“õ –±—ñ—Ä–µ–≥–µ–π –∂—ã–ª–¥–∞—Ä–¥—ã –∞–ª—É
    const years = await Book.findAll({
      attributes: [
        [Sequelize.fn('DISTINCT', Sequelize.col('publicationYear')), 'year']
      ],
      where: {
        publicationYear: { [Op.ne]: null }
      },
      order: [['publicationYear', 'DESC']],
      raw: true
    });
    
    // –ú–∞—Å—Å–∏–≤–∫–µ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É
    const languageList = languages.map(l => l.language).filter(Boolean);
    const yearList = years.map(y => y.year).filter(Boolean);
    
    console.log('‚úÖ –§–∏–ª—å—Ç—Ä –æ–ø—Ü–∏—è–ª–∞—Ä—ã —Ç–∞–±—ã–ª–¥—ã:', {
      languages: languageList,
      years: yearList.length + ' –∂—ã–ª'
    });
    
    res.status(200).json({
      success: true,
      data: {
        languages: languageList,
        years: yearList
      }
    });
  } catch (err) {
    console.error('‚ùå –§–∏–ª—å—Ç—Ä –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω –∞–ª—É “õ–∞—Ç–µ—Å—ñ:', err);
    next(err);
  }
};

/**
 * @desc    –ñ–∞“£–∞ “õ–æ—Å—ã–ª“ì–∞–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É
 * @route   GET /api/books/new
 * @access  Public
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è —Å–æ“£“ì—ã “õ–æ—Å—ã–ª“ì–∞–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
 */
exports.getNewBooks = async (req, res, next) => {
  try {
    // –°–æ“£“ì—ã “õ–æ—Å—ã–ª“ì–∞–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É
    const books = await Book.findAll({
      include: [
        {
          model: Category,
          as: 'category',
          attributes: ['id', 'name'],
        }
      ],
      order: [
        ['createdAt', 'DESC']
      ],
      limit: 10
    });

    // –ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã“£ –º“±“õ–∞–±–∞ URL-–¥–∞—Ä—ã–Ω —Ç–æ–ª—ã“õ URL-–¥–∞—Ä“ì–∞ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É
    const booksWithFullUrls = books.map(book => {
      const bookObj = book.toJSON();
      
      if (bookObj.cover && !bookObj.cover.startsWith('http')) {
        const serverUrl = `${req.protocol}://${req.get('host')}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        bookObj.relativeCoverPath = bookObj.cover;
        bookObj.cover = `${serverUrl}${bookObj.cover}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏
        const coverFilePath = path.join(__dirname, '../../public', bookObj.relativeCoverPath);
        bookObj.coverFileExists = fs.existsSync(coverFilePath);
        bookObj.coverFileSize = bookObj.coverFileExists ? fs.statSync(coverFilePath).size : 0;
        
        console.log(`üìö –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–ª–æ–∂–∫–µ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π/–Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏ ${bookObj.id} (${bookObj.title}):
          - –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: ${bookObj.relativeCoverPath}
          - –ü–æ–ª–Ω—ã–π URL: ${bookObj.cover}
          - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${bookObj.coverFileExists ? '–î–∞' : '–ù–µ—Ç'}
          - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${bookObj.coverFileSize} –±–∞–π—Ç
        `);
      }
      
      return bookObj;
    });

    res.status(200).json({
      success: true,
      count: booksWithFullUrls.length,
      data: booksWithFullUrls,
    });
  } catch (err) {
    next(err);
  }
};

/**
 * @desc    –¢–û–ü –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä –±–æ–π—ã–Ω—à–∞ –∞–ª—É
 * @route   GET /api/books/top-by-category
 * @access  Public
 * 
 * @description –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è –µ“£ —Ç–∞–Ω—ã–º–∞–ª –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã ”ô—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è “Ø—à—ñ–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
 * –¢–∞–Ω—ã–º–∞–ª–¥—ã–ª—ã“õ —Ä–µ–π—Ç–∏–Ω–≥, –±–µ—Ç–±–µ–ª–≥—ñ–ª–µ—Ä —Å–∞–Ω—ã –∂”ô–Ω–µ “õ–∞—Ä—ã–∑“ì–∞ –∞–ª—É–ª–∞—Ä —Å–∞–Ω—ã –±–æ–π—ã–Ω—à–∞ –∞–Ω—ã“õ—Ç–∞–ª–∞–¥—ã.
 */
exports.getTopBooksByCategory = async (req, res, next) => {
  try {
    const limit = parseInt(req.query.limit, 10) || 3; // ”ò—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è “Ø—à—ñ–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä —Å–∞–Ω—ã
    const minRating = parseFloat(req.query.minRating) || 0; // –ú–∏–Ω–∏–º—É–º —Ä–µ–π—Ç–∏–Ω–≥
    
    console.log('üìä –¢–û–ü –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä –±–æ–π—ã–Ω—à–∞ –∞–ª—É...', { limit, minRating });
    
    // –ë–∞—Ä–ª—ã“õ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∞–ª—É
    const categories = await Category.findAll({
      attributes: ['id', 'name', 'description'],
      order: [['name', 'ASC']],
    });
    
    const categoriesWithTopBooks = [];
    
    // ”ò—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è “Ø—à—ñ–Ω –¢–û–ü –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É
    for (const category of categories) {
      const books = await Book.findAll({
        where: {
          categoryId: category.id,
          rating: { [Op.gte]: minRating }
        },
        include: [
          {
            model: Category,
            as: 'category',
            attributes: ['id', 'name'],
          },
          {
            model: Bookmark,
            as: 'bookmarks',
            attributes: [],
          }
        ],
        attributes: {
          include: [
            // –ë–µ—Ç–±–µ–ª–≥—ñ–ª–µ—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É
            [Sequelize.literal('(SELECT COUNT(*) FROM Bookmarks WHERE Bookmarks.bookId = Book.id)'), 'bookmarkCount'],
            // –ë–µ–ª—Å–µ–Ω–¥—ñ “õ–∞—Ä—ã–∑“ì–∞ –∞–ª—É–ª–∞—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É  
            [Sequelize.literal('(SELECT COUNT(*) FROM Borrows WHERE Borrows.bookId = Book.id AND Borrows.status = "active")'), 'activeBorrowsCount'],
            // –ñ–∞–ª–ø—ã “õ–∞—Ä—ã–∑“ì–∞ –∞–ª—É–ª–∞—Ä —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É
            [Sequelize.literal('(SELECT COUNT(*) FROM Borrows WHERE Borrows.bookId = Book.id)'), 'totalBorrowsCount']
          ]
        },
        order: [
          // –¢–∞–Ω—ã–º–∞–ª–¥—ã“õ —Ñ–æ—Ä–º—É–ª–∞—Å—ã: (—Ä–µ–π—Ç–∏–Ω–≥ * 2) + (–±–µ—Ç–±–µ–ª–≥—ñ–ª–µ—Ä —Å–∞–Ω—ã * 0.5) + (–∂–∞–ª–ø—ã “õ–∞—Ä—ã–∑“ì–∞ –∞–ª—É–ª–∞—Ä —Å–∞–Ω—ã * 0.3)
          [Sequelize.literal('(rating * 2 + (SELECT COUNT(*) FROM Bookmarks WHERE Bookmarks.bookId = Book.id) * 0.5 + (SELECT COUNT(*) FROM Borrows WHERE Borrows.bookId = Book.id) * 0.3)'), 'DESC']
        ],
        limit: limit
      });
      
      // –ï–≥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è–¥–∞ –∫—ñ—Ç–∞–ø—Ç–∞—Ä –±–æ–ª—Å–∞, –æ–ª–∞—Ä–¥—ã “õ–æ—Å—É
      if (books.length > 0) {
        // –ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã“£ –º“±“õ–∞–±–∞ URL-–¥–∞—Ä—ã–Ω —Ç–æ–ª—ã“õ URL-–¥–∞—Ä“ì–∞ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É
        const booksWithFullUrls = books.map(book => {
          const bookObj = book.toJSON();
          
          if (bookObj.cover && !bookObj.cover.startsWith('http')) {
            const serverUrl = `${req.protocol}://${req.get('host')}`;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            bookObj.relativeCoverPath = bookObj.cover;
            bookObj.cover = `${serverUrl}${bookObj.cover}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏
            const coverFilePath = path.join(__dirname, '../../public', bookObj.relativeCoverPath);
            bookObj.coverFileExists = fs.existsSync(coverFilePath);
            bookObj.coverFileSize = bookObj.coverFileExists ? fs.statSync(coverFilePath).size : 0;
          }
          
          return bookObj;
        });
        
        categoriesWithTopBooks.push({
          category: {
            id: category.id,
            name: category.name,
            description: category.description
          },
          books: booksWithFullUrls
        });
      }
    }
    
    console.log(`‚úÖ –¢–û–ü –∫—ñ—Ç–∞–ø—Ç–∞—Ä —Ç–∞–±—ã–ª–¥—ã: ${categoriesWithTopBooks.length} –∫–∞—Ç–µ–≥–æ—Ä–∏—è`);
    
    res.status(200).json({
      success: true,
      count: categoriesWithTopBooks.length,
      data: categoriesWithTopBooks,
    });
  } catch (err) {
    console.error('‚ùå –¢–û–ü –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ:', err);
    next(err);
  }
};