/**
 * Деректер қорын инициализациялау
 * 
 * @description Бұл файл деректер қорының құрылымын синхрондайды және 
 * бастапқы деректерді енгізеді (мысалы, әдепкі әкімші пайдаланушысы мен кітапханашы).
 * Жүйе бірінші рет іске қосылған кезде, деректер қорында пайдаланушылар болмайды.
 * Осы скрипт автоматты түрде "admin" рөлі бар пайдаланушы және "librarian" рөлі
 * бар пайдаланушы жасайды, осылайша жүйеге кіру және онымен жұмыс істеу мүмкіндігі болады.
 */
const db = require('./models');

/**
 * Деректер қорын инициализациялау функциясы
 * 
 * @description Деректер қорымен синхрондау және бастапқы деректерді енгізу
 * @returns {Promise<void>} Инициализация процесі аяқталған кезде шешілетін Promise
 * @details Бұл функция келесі әрекеттерді орындайды:
 * 1. Жүйедегі барлық модельдерді дерекқор кестелерімен синхрондайды
 * 2. Жүйеде әкімші пайдаланушы бар-жоғын тексереді, жоқ болса жасайды
 * 3. Жүйеде кітапханашы пайдаланушы бар-жоғын тексереді, жоқ болса жасайды
 * 4. Жүйеде категориялар бар-жоғын тексереді, жоқ болса әдепкі категорияларды енгізеді
 * Бұл функция JWT орнына қарапайым логин/құпия сөз арқылы авторизацияны қолдайды.
 */
async function initDatabase() {
  try {
    console.log('Деректер қорын синхрондау...');
    
    // Барлық модельдерді деректер қорымен синхрондау
    // force: true - бар кестелерді жояды (абайлап қолданыңыз!)
    // force: false - кестелер жоқ болса ғана жасайды
    await db.sequelize.sync({ force: false });
    
    console.log('Деректер қоры синхрондау сәтті аяқталды.');
    
    // Жүйеде пайдаланушылар бар-жоғын тексеру
    const userCount = await db.User.count();
    
    // Егер пайдаланушылар жоқ болса, әдепкі пайдаланушыларды жасау
    if (userCount === 0) {
      console.log('Әдепкі әкімші жасалуда...');
      
      try {
        await db.User.create({
          username: 'admin',
          firstName: 'Әкімші',
          lastName: 'Жүйе',
          email: 'admin@narxoz.kz',
          password: 'admin123',
          phoneNumber: '+77001234567',
          faculty: 'Әкімшілік',
          specialization: 'Кітапхана',
          studentId: 'ADMIN-001',
          role: 'admin'
        });
        console.log('Әдепкі әкімші сәтті жасалды.');
      } catch (error) {
        console.error('Әкімші жасау кезінде қате:', error.message);
      }
    
      console.log('Әдепкі студент жасалуда...');
      
      try {
        await db.User.create({
          username: 'student',
          firstName: 'Оқушы',
          lastName: 'Тестов',
          email: 'student@narxoz.kz',
          password: 'student123',
          phoneNumber: '+77007654321',
          faculty: 'Технология',
          specialization: 'Компьютерлік ғылымдар',
          studentId: 'STU-001',
          role: 'student'
        });
        console.log('Әдепкі студент сәтті жасалды.');
      } catch (error) {
        console.error('Студент жасау кезінде қате:', error.message);
      }
    } else {
      console.log('Пайдаланушылар бұрыннан бар. Жаңа пайдаланушылар жасалмайды.');
    }

    // Категориялар бар-жоғын тексеру
    const categoryCount = await db.Category.count();
    
    // Егер категориялар жоқ болса, әдепкі категорияларды жасау
    if (categoryCount === 0) {
      console.log('Әдепкі категориялар жасалуда...');
      
      const defaultCategories = [
        { 
          name: 'Ғылыми әдебиет', 
          description: 'Ғылыми зерттеулер, академиялық жұмыстар және ғылыми мақалалар'
        },
        { 
          name: 'Көркем әдебиет', 
          description: 'Романдар, әңгімелер, поэзия және көркем әдебиеттің басқа түрлері'
        },
        { 
          name: 'Оқулықтар', 
          description: 'Оқу процесіне арналған оқулықтар мен оқу құралдары'
        },
        { 
          name: 'Анықтамалықтар', 
          description: 'Сөздіктер, энциклопедиялар және басқа анықтамалық материалдар'
        },
        { 
          name: 'Бизнес және экономика', 
          description: 'Бизнес, экономика, қаржы және менеджмент бойынша кітаптар'
        }
      ];
      
      try {
        await db.Category.bulkCreate(defaultCategories);
        console.log('Әдепкі категориялар сәтті жасалды.');
      } catch (error) {
        console.error('Категориялар жасау кезінде қате:', error.message);
      }
    } else {
      console.log('Категориялар бұрыннан бар. Жаңа категориялар жасалмайды.');
    }
    
    console.log('Деректер қорын инициализациялау сәтті аяқталды.');
    return true;
  } catch (error) {
    console.error('Деректер қорын инициализациялау кезінде қате орын алды:', error);
    return false;
  }
}

// Автоматты түрде іске қосылатын функцияны өшіру, тек модуль ретінде экспорттау
module.exports = { initDatabase };