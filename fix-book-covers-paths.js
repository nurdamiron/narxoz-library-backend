/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –æ–±–ª–æ–∂–∫–∞–º –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –£–±–∏—Ä–∞–µ—Ç debug URL –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
 */

const db = require('./src/models');

async function fixBookCoverPaths() {
  try {
    console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –æ–±–ª–æ–∂–∫–∞–º –∫–Ω–∏–≥...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
    const books = await db.Book.findAll();
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${books.length}\n`);
    
    let fixedCount = 0;
    
    for (const book of books) {
      if (book.cover) {
        let oldCover = book.cover;
        let newCover = oldCover;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—É—Ç—å /api/book-cover-debug/
        if (oldCover.includes('/api/book-cover-debug/')) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
          const parts = oldCover.split('/');
          const filename = parts[parts.length - 1];
          
          // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
          newCover = `/uploads/covers/${filename}`;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await book.update({ cover: newCover });
          
          console.log(`‚úÖ –ö–Ω–∏–≥–∞ ID ${book.id} "${book.title}":`);
          console.log(`   –°—Ç–∞—Ä—ã–π –ø—É—Ç—å: ${oldCover}`);
          console.log(`   –ù–æ–≤—ã–π –ø—É—Ç—å: ${newCover}\n`);
          
          fixedCount++;
        }
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ URL –Ω–∞ localhost
        else if (oldCover.includes('http://localhost') && oldCover.includes('/uploads/covers/')) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
          const match = oldCover.match(/\/uploads\/covers\/[^?#]+/);
          if (match) {
            newCover = match[0];
            
            await book.update({ cover: newCover });
            
            console.log(`‚úÖ –ö–Ω–∏–≥–∞ ID ${book.id} "${book.title}":`);
            console.log(`   –°—Ç–∞—Ä—ã–π –ø—É—Ç—å: ${oldCover}`);
            console.log(`   –ù–æ–≤—ã–π –ø—É—Ç—å: ${newCover}\n`);
            
            fixedCount++;
          }
        }
      }
    }
    
    if (fixedCount > 0) {
      console.log(`‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Ç–µ–π: ${fixedCount}`);
    } else {
      console.log('‚ú® –í—Å–µ –ø—É—Ç–∏ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixBookCoverPaths();