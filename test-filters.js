/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–Ω–∏–≥
 */
const axios = require('axios');

const API_URL = 'http://localhost:5001/api';

async function testFilters() {
  try {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–Ω–∏–≥...\n');

    // 1. –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏ –≥–æ–¥–æ–≤...');
    const filterOptions = await axios.get(`${API_URL}/books/filter-options`);
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:', filterOptions.data.data.languages);
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã:', filterOptions.data.data.years.slice(0, 10), '...');
    
    const languages = filterOptions.data.data.languages;
    const years = filterOptions.data.data.years;

    // 2. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —è–∑—ã–∫—É
    if (languages.length > 0) {
      console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —è–∑—ã–∫—É...');
      for (const lang of languages) {
        const response = await axios.get(`${API_URL}/books`, {
          params: { language: lang, limit: 5 }
        });
        console.log(`‚úÖ –Ø–∑—ã–∫ "${lang}": –Ω–∞–π–¥–µ–Ω–æ ${response.data.total} –∫–Ω–∏–≥`);
      }
    }

    // 3. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ–¥—É
    if (years.length > 0) {
      console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ–¥—É...');
      const testYear = years[0]; // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –≥–æ–¥
      const response = await axios.get(`${API_URL}/books`, {
        params: { year: testYear, limit: 5 }
      });
      console.log(`‚úÖ –ì–æ–¥ ${testYear}: –Ω–∞–π–¥–µ–Ω–æ ${response.data.total} –∫–Ω–∏–≥`);
    }

    // 4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    if (languages.length > 0 && years.length > 0) {
      console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞...');
      const response = await axios.get(`${API_URL}/books`, {
        params: { 
          language: languages[0], 
          year: years[0],
          limit: 5 
        }
      });
      console.log(`‚úÖ –Ø–∑—ã–∫ "${languages[0]}" + –ì–æ–¥ ${years[0]}: –Ω–∞–π–¥–µ–Ω–æ ${response.data.total} –∫–Ω–∏–≥`);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
    const allBooks = await axios.get(`${API_URL}/books`, {
      params: { limit: 100 }
    });
    console.log(`‚úÖ –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${allBooks.data.total}`);
    
    // –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ –≤ –±–∞–∑–µ
    const languageStats = {};
    allBooks.data.data.forEach(book => {
      languageStats[book.language] = (languageStats[book.language] || 0) + 1;
    });
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:');
    Object.entries(languageStats).forEach(([lang, count]) => {
      console.log(`   - ${lang}: ${count} –∫–Ω–∏–≥`);
    });

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFilters();