/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node run-language-migration.js
 */
const path = require('path');
const db = require('./src/models');

async function runMigration() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –∫–Ω–∏–≥...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await db.sequelize.authenticate();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—É—â–∏–º —è–∑—ã–∫–∞–º
    console.log('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:');
    const languageStats = await db.Book.findAll({
      attributes: [
        'language',
        [db.sequelize.fn('COUNT', db.sequelize.col('id')), 'count']
      ],
      group: ['language'],
      raw: true
    });
    
    languageStats.forEach(stat => {
      console.log(`   - ${stat.language}: ${stat.count} –∫–Ω–∏–≥`);
    });
    console.log('');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥–∏ —Å —è–∑—ã–∫–æ–º "“ö–∞–∑–∞“õ—à–∞" –Ω–∞ "–ö–∞–∑–∞—Ö—Å–∫–∏–π"
    const kazakhBooks = await db.Book.findAll({
      where: { language: '“ö–∞–∑–∞“õ—à–∞' }
    });
    
    if (kazakhBooks.length > 0) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${kazakhBooks.length} –∫–Ω–∏–≥ —Å —è–∑—ã–∫–æ–º "“ö–∞–∑–∞“õ—à–∞" –Ω–∞ "–ö–∞–∑–∞—Ö—Å–∫–∏–π"...`);
      
      for (const book of kazakhBooks) {
        try {
          await book.update({ language: '–ö–∞–∑–∞—Ö—Å–∫–∏–π' });
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ "${book.title}" (ID: ${book.id}):`, error.message);
        }
      }
      
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n');
    } else {
      console.log('‚ÑπÔ∏è  –ö–Ω–∏–≥–∏ —Å —è–∑—ã–∫–æ–º "“ö–∞–∑–∞“õ—à–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥–∏ —Å —è–∑—ã–∫–æ–º "English" –Ω–∞ "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
    const englishBooks = await db.Book.findAll({
      where: { language: 'English' }
    });
    
    if (englishBooks.length > 0) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${englishBooks.length} –∫–Ω–∏–≥ —Å —è–∑—ã–∫–æ–º "English" –Ω–∞ "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"...`);
      
      for (const book of englishBooks) {
        try {
          await book.update({ language: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' });
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ "${book.title}" (ID: ${book.id}):`, error.message);
        }
      }
      
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n');
    } else {
      console.log('‚ÑπÔ∏è  –ö–Ω–∏–≥–∏ —Å —è–∑—ã–∫–æ–º "English" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:');
    const updatedStats = await db.Book.findAll({
      attributes: [
        'language',
        [db.sequelize.fn('COUNT', db.sequelize.col('id')), 'count']
      ],
      group: ['language'],
      raw: true
    });
    
    updatedStats.forEach(stat => {
      console.log(`   - ${stat.language}: ${stat.count} –∫–Ω–∏–≥`);
    });
    
    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await db.sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runMigration();